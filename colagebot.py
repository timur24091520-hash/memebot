import os
import logging
from PIL import Image
import telebot
from telebot import types

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ (–∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π)
BOT_TOKEN = "YOUR_BOT_TOKEN_HERE"

# –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞
bot = telebot.TeleBot(BOT_TOKEN)

# –ü–∞–ø–∫–∞ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
TEMP_FOLDER = "temp_images"
if not os.path.exists(TEMP_FOLDER):
    os.makedirs(TEMP_FOLDER)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}

class UserData:
    def __init__(self):
        self.photos = []
        self.waiting_for_photos = False
        self.expected_count = 0

def create_collage(photos_paths, layout):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–ª–∞–∂–∞ –∏–∑ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
    try:
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        images = [Image.open(path) for path in photos_paths]
        
        # –ü—Ä–∏–≤–æ–¥–∏–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫ –æ–¥–Ω–æ–º—É —Ä–∞–∑–º–µ—Ä—É (–∫–≤–∞–¥—Ä–∞—Ç)
        size = 400
        images = [img.resize((size, size)) for img in images]
        
        # –°–æ–∑–¥–∞–µ–º —Ö–æ–ª—Å—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç layout
        if layout == 3:
            # 3 —Ñ–æ—Ç–æ: –æ–¥–Ω–∞ —Å–≤–µ—Ä—Ö—É, –¥–≤–µ —Å–Ω–∏–∑—É
            collage = Image.new('RGB', (size * 2, size * 2))
            collage.paste(images[0], (0, 0, size * 2, size))
            collage.paste(images[1], (0, size, size, size * 2))
            collage.paste(images[2], (size, size, size * 2, size * 2))
        elif layout == 4:
            # 4 —Ñ–æ—Ç–æ: 2x2
            collage = Image.new('RGB', (size * 2, size * 2))
            collage.paste(images[0], (0, 0, size, size))
            collage.paste(images[1], (size, 0, size * 2, size))
            collage.paste(images[2], (0, size, size, size * 2))
            collage.paste(images[3], (size, size, size * 2, size * 2))
        elif layout == 5:
            # 5 —Ñ–æ—Ç–æ: 3 —Å–≤–µ—Ä—Ö—É, 2 —Å–Ω–∏–∑—É
            collage = Image.new('RGB', (size * 3, size * 2))
            for i in range(3):
                collage.paste(images[i], (i * size, 0, (i + 1) * size, size))
            for i in range(3, 5):
                collage.paste(images[i], ((i - 3) * size, size, (i - 2) * size, size * 2))
        elif layout == 6:
            # 6 —Ñ–æ—Ç–æ: 3x2
            collage = Image.new('RGB', (size * 3, size * 2))
            for i in range(6):
                x = (i % 3) * size
                y = (i // 3) * size
                collage.paste(images[i], (x, y, x + size, y + size))
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ª–ª–∞–∂
        output_path = os.path.join(TEMP_FOLDER, f"collage_{layout}.jpg")
        collage.save(output_path, "JPEG", quality=95)
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        for img in images:
            img.close()
            
        return output_path
        
    except Exception as e:
        logger.error(f"Error creating collage: {e}")
        return None

@bot.message_handler(commands=['start'])
def send_welcome(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = message.from_user.id
    user_data[user_id] = UserData()
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn3 = types.KeyboardButton("3 —Ñ–æ—Ç–æ")
    btn4 = types.KeyboardButton("4 —Ñ–æ—Ç–æ")
    btn5 = types.KeyboardButton("5 —Ñ–æ—Ç–æ")
    btn6 = types.KeyboardButton("6 —Ñ–æ—Ç–æ")
    markup.add(btn3, btn4, btn5, btn6)
    
    bot.send_message(
        message.chat.id,
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–ª–ª–∞–∂–µ–π!\n\n"
        "–í—ã–±–µ—Ä–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–ª—è –∫–æ–ª–ª–∞–∂–∞:",
        reply_markup=markup
    )

@bot.message_handler(func=lambda message: message.text in ["3 —Ñ–æ—Ç–æ", "4 —Ñ–æ—Ç–æ", "5 —Ñ–æ—Ç–æ", "6 —Ñ–æ—Ç–æ"])
def handle_photo_count(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ñ–æ—Ç–æ"""
    user_id = message.from_user.id
    
    if user_id not in user_data:
        user_data[user_id] = UserData()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ
    count_map = {"3 —Ñ–æ—Ç–æ": 3, "4 —Ñ–æ—Ç–æ": 4, "5 —Ñ–æ—Ç–æ": 5, "6 —Ñ–æ—Ç–æ": 6}
    expected_count = count_map[message.text]
    
    user_data[user_id].expected_count = expected_count
    user_data[user_id].waiting_for_photos = True
    user_data[user_id].photos = []
    
    bot.send_message(
        message.chat.id,
        f"üì∏ –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ {expected_count} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π.\n\n"
        f"–ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ —Å—Ä–∞–∑—É –∏–ª–∏ –ø–æ –æ–¥–Ω–æ–π.",
        reply_markup=types.ReplyKeyboardRemove()
    )

@bot.message_handler(content_types=['photo'])
def handle_photos(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
    user_id = message.from_user.id
    
    if user_id not in user_data or not user_data[user_id].waiting_for_photos:
        bot.send_message(message.chat.id, "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ –¥–ª—è –∫–æ–ª–ª–∞–∂–∞!")
        return
    
    user_data_obj = user_data[user_id]
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
        file_info = bot.get_file(message.photo[-1].file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é
        file_path = os.path.join(TEMP_FOLDER, f"{user_id}_{len(user_data_obj.photos)}.jpg")
        with open(file_path, 'wb') as new_file:
            new_file.write(downloaded_file)
        
        user_data_obj.photos.append(file_path)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        remaining = user_data_obj.expected_count - len(user_data_obj.photos)
        
        if remaining > 0:
            bot.send_message(
                message.chat.id,
                f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(user_data_obj.photos)} –∏–∑ {user_data_obj.expected_count} —Ñ–æ—Ç–æ\n"
                f"–û—Å—Ç–∞–ª–æ—Å—å: {remaining}"
            )
        else:
            # –í—Å–µ —Ñ–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω—ã, —Å–æ–∑–¥–∞–µ–º –∫–æ–ª–ª–∞–∂
            bot.send_message(message.chat.id, "üîÑ –°–æ–∑–¥–∞—é –∫–æ–ª–ª–∞–∂...")
            
            collage_path = create_collage(
                user_data_obj.photos, 
                user_data_obj.expected_count
            )
            
            if collage_path:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–ª–ª–∞–∂
                with open(collage_path, 'rb') as photo:
                    bot.send_photo(
                        message.chat.id, 
                        photo,
                        caption="üéâ –í–∞—à –∫–æ–ª–ª–∞–∂ –≥–æ—Ç–æ–≤!"
                    )
                
                # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
                for photo_path in user_data_obj.photos:
                    if os.path.exists(photo_path):
                        os.remove(photo_path)
                if os.path.exists(collage_path):
                    os.remove(collage_path)
                
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_data_obj.photos = []
                user_data_obj.waiting_for_photos = False
                
                # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∫–æ–ª–ª–∞–∂
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                btn3 = types.KeyboardButton("3 —Ñ–æ—Ç–æ")
                btn4 = types.KeyboardButton("4 —Ñ–æ—Ç–æ")
                btn5 = types.KeyboardButton("5 —Ñ–æ—Ç–æ")
                btn6 = types.KeyboardButton("6 —Ñ–æ—Ç–æ")
                markup.add(btn3, btn4, btn5, btn6)
                
                bot.send_message(
                    message.chat.id,
                    "–•–æ—á–µ—à—å —Å–æ–∑–¥–∞—Ç—å –µ—â—ë –æ–¥–∏–Ω –∫–æ–ª–ª–∞–∂? –í—ã–±–µ—Ä–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ:",
                    reply_markup=markup
                )
            else:
                bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–ª–ª–∞–∂–∞")
                # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
                for photo_path in user_data_obj.photos:
                    if os.path.exists(photo_path):
                        os.remove(photo_path)
                user_data_obj.photos = []
                user_data_obj.waiting_for_photos = False
                
    except Exception as e:
        logger.error(f"Error handling photo: {e}")
        bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ")

@bot.message_handler(commands=['help'])
def send_help(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = """
ü§ñ –ë–æ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–ª–ª–∞–∂–µ–π

–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:
1. –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ñ–æ—Ç–æ (3, 4, 5 –∏–ª–∏ 6)
2. –û—Ç–ø—Ä–∞–≤—å –±–æ—Ç—É —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
3. –ü–æ–ª—É—á–∏ –≥–æ—Ç–æ–≤—ã–π –∫–æ–ª–ª–∞–∂!

–ö–æ–º–∞–Ω–¥—ã:
/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è–µ—Ç –≤—Å–µ —Ñ–æ—Ç–æ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–ª–ª–∞–∂–∞.
    """
    bot.send_message(message.chat.id, help_text)

@bot.message_handler(func=lambda message: True)
def handle_other_messages(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    bot.send_message(
        message.chat.id,
        "–Ø –ø–æ–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥—ã –∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ üòä\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –∏–ª–∏ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏."
    )

if __name__ == "__main__":
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    try:
        bot.polling(none_stop=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞: {e}")
